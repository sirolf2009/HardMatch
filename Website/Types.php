<?php
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Store {
  static $_TSPEC;

  /**
   * @var string
   */
  public $product = null;
  /**
   * @var string
   */
  public $store = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var string
   */
  public $url = null;
  /**
   * @var string
   */
  public $category = null;
  /**
   * @var string
   */
  public $stock = null;
  /**
   * @var string
   */
  public $img = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'product',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'store',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'category',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'stock',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'img',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['product'])) {
        $this->product = $vals['product'];
      }
      if (isset($vals['store'])) {
        $this->store = $vals['store'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['stock'])) {
        $this->stock = $vals['stock'];
      }
      if (isset($vals['img'])) {
        $this->img = $vals['img'];
      }
    }
  }

  public function getName() {
    return 'Store';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->product);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->store);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->img);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Store');
    if ($this->product !== null) {
      $xfer += $output->writeFieldBegin('product', TType::STRING, 1);
      $xfer += $output->writeString($this->product);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->store !== null) {
      $xfer += $output->writeFieldBegin('store', TType::STRING, 2);
      $xfer += $output->writeString($this->store);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 4);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::STRING, 5);
      $xfer += $output->writeString($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stock !== null) {
      $xfer += $output->writeFieldBegin('stock', TType::STRING, 6);
      $xfer += $output->writeString($this->stock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->img !== null) {
      $xfer += $output->writeFieldBegin('img', TType::STRING, 7);
      $xfer += $output->writeString($this->img);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


